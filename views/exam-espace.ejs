<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= exam.titre %></title>
</head>
<body>
    <div class="container exam-details">
        <h1><%= exam.titre %></h1>
        <p><%= exam.description %></p>
        <p><strong>Public cible: </strong><%= exam.public %></p>
        <p><strong>Date de création: </strong><%= new Date(exam.dateCreation).toLocaleDateString('fr-FR') %></p>
        
        <h2>Questions:</h2>
        
        <!-- Affichage du timer pour la question actuelle -->
       <div id="timer-container">
            <p><strong>Temps restant: </strong><span id="timer">00:00</span></p>
        </div>
        
        <form action="/etudiant/submit-exam" method="POST" id="exam-form">
            <input type="hidden" name="examId" value="<%= exam._id %>">
            <input type="hidden" id="total-questions" value="<%= exam.questions ? exam.questions.length : 0 %>">
            <!-- Champ caché pour stocker les données de géolocalisation -->
            <input type="hidden" name="geolocalization" id="geoloc-input">
            
            <div id="questions-container">
                <% if (exam.questions && exam.questions.length > 0) { %>
                    <% exam.questions.forEach(function(question, index) { %>
                        <!-- Stocker le temps limite en secondes dans un champ caché -->
                        <input type="hidden" id="question-<%= index %>-timer" value="<%= question.duree %>">
                        <div class="question" id="question-<%= index %>" style=<%= index > 0 ? 'display:none;' : '' %>>
                            <% if (question.media) { %>
                                <div class="question-media">
                                    <p><strong>Fichier joint :</strong></p>
                                    <% if (question.media.endsWith('.jpg') || question.media.endsWith('.png') || question.media.endsWith('.gif')) { %>
                                        <img src="<%= question.media %>" alt="Image Media" style="max-width: 300px;">
                                    <% } else if (question.media.endsWith('.mp3') || question.media.endsWith('.wav')) { %>
                                        <audio controls>
                                            <source src="<%= question.media %>" type="audio/mp3">
                                        </audio>
                                    <% } else if (question.media.endsWith('.mp4') || question.media.endsWith('.mov')) { %>
                                        <video controls>
                                            <source src="<%= question.media %>" type="video/mp4">
                                        </video>
                                    <% } %>
                                </div>
                            <% } %>
                            
                            <div class="question-header">
                                <p class="question-text"><%= index + 1 %>. <%= question.enonce %></p>
                                <p class="question-timer">Temps: <span id="question-<%= index %>-time-display">00:00</span></p>
                            </div>
                            <p class="question-points"><%= question.points %> points</p>
                            
                            <% if (question.type === 'qcm') { %>
                                <div class="options">
                                    <% question.choix.forEach(function(option) { %>
                                        <label class="option">
                                            <input type="radio" name="answers[<%= question._id %>]" value="<%= option %>" class="answer-input" data-question-index="<%= index %>">
                                            <span class="option-text"><%= option %></span>
                                        </label>
                                    <% }); %>
                                </div>
                            <% } else { %>
                                <div class="direct-answer">
                                    <input type="text" name="answers[<%= question._id %>]" placeholder="Votre réponse" class="answer-input text-input" data-question-index="<%= index %>">
                                    <button type="button" class="btn-next" data-question-index="<%= index %>">Question suivante</button>
                                </div>
                            <% } %>

                            <% if (question.type === 'qcm') { %>
                                <button type="button" class="btn-next" data-question-index="<%= index %>">Question suivante</button>
                            <% } %>
                            
                            <p class="question-progress">Question <%= index + 1 %> sur <%= exam.questions.length %></p>
                        </div>
                    <% }); %>
                    
                    <div id="exam-complete" style="display:none;">
    <h3>Vous avez terminé toutes les questions!</h3>
    <p id="final-score" style="font-size: 20px; color: #4a90e2;"></p>
    <button type="submit" class="btn-submit">Soumettre l'examen</button>
</div>
                <% } else { %>
                    <p class="no-questions">Aucune question disponible pour cet examen.</p>
                <% } %>
            </div>
        </form>
        
        <div class="actions">
            <a onclick="exitPage()" class="btn">Retour à l'accueil</a>
        </div>
    </div>
    
    <style>
        *,
        *::before,
        *::after {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f5f7fa;
            line-height: 1.6;
        }
        
        .container {
            max-width: 800px;
            margin: 40px auto;
            padding: 30px;
            background-color: #fff;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        }
        
        .container h1 {
            font-size: 28px;
            color: #333;
            margin-bottom: 20px;
            border-bottom: 2px solid #4a90e2;
            padding-bottom: 10px;
        }
        
        .exam-details p {
            font-size: 16px;
            color: #555;
            margin-bottom: 12px;
        }
        
        .exam-details strong {
            color: #222;
        }
        
        h2 {
            font-size: 22px;
            margin: 30px 0 20px;
            color: #333;
        }
        
        .question {
            margin-bottom: 30px;
            padding: 20px;
            border: 1px solid #ddd;
            border-radius: 10px;
            background-color: #f9f9f9;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
        }
        
        .question-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 10px;
        }
        
        .question-text {
            font-size: 18px;
            font-weight: 500;
            color: #333;
            flex: 1;
            margin-right: 15px;
        }
        
        .question-timer {
            background-color: #f0f7ff;
            padding: 5px 10px;
            border-radius: 5px;
            color: #4a90e2;
            font-weight: bold;
            white-space: nowrap;
        }
        
        .question-points {
            font-size: 14px;
            color: #666;
            margin-bottom: 15px;
            font-style: italic;
        }
        
        .options {
            display: flex;
            flex-direction: column;
            gap: 10px;
            margin-bottom: 20px;
        }
        
        .option {
            display: flex;
            align-items: center;
            padding: 8px 12px;
            background-color: #fff;
            border: 1px solid #ddd;
            border-radius: 6px;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .option:hover {
            background-color: #f0f7ff;
            border-color: #4a90e2;
        }
        
        .option input[type="radio"] {
            margin-right: 12px;
        }
        
        .option-text {
            font-size: 16px;
            color: #333;
        }
        
        .direct-answer {
            margin-top: 10px;
            margin-bottom: 20px;
        }
        
        .answer-input {
            width: 100%;
            padding: 12px;
            border: 1px solid #ddd;
            border-radius: 6px;
            font-size: 16px;
            margin-top: 5px;
            margin-bottom: 15px;
        }
        
        .answer-input:focus {
            border-color: #4a90e2;
            outline: none;
            box-shadow: 0 0 0 2px rgba(74, 144, 226, 0.2);
        }
        
        .no-questions {
            padding: 20px;
            text-align: center;
            color: #666;
            font-style: italic;
        }
        
        .btn-submit, .btn-next {
            background-color: #4a90e2;
            color: white;
            border: none;
            padding: 12px 24px;
            font-size: 16px;
            border-radius: 6px;
            cursor: pointer;
            transition: background-color 0.2s ease;
        }
        
        .btn-submit {
            display: block;
            margin: 30px auto;
        }
        
        .btn-next {
            display: inline-block;
            margin-top: 10px;
        }
        
        .btn-submit:hover, .btn-next:hover {
            background-color: #3a7bc8;
        }
        
        .actions {
            margin-top: 30px;
            text-align: right;
        }
        
        .btn {
            background-color: #000000;
            color: white;
            padding: 10px 20px;
            text-decoration: none;
            border-radius: 6px;
            font-weight: 500;
            transition: background-color 0.2s ease;
            display: inline-block;
            cursor: pointer;
        }
        
        .btn:hover {
            background-color: #3f4144;
        }
        
        #timer-container {
            background-color: #f0f7ff;
            padding: 10px 15px;
            margin-bottom: 20px;
            border-radius: 8px;
            border-left: 4px solid #4a90e2;
        }
        
        #timer {
            font-weight: bold;
            font-size: 18px;
            color: #4a90e2;
        }
        
        .question-progress {
            font-size: 14px;
            color: #777;
            margin-top: 15px;
            text-align: right;
            font-style: italic;
        }
        
        #exam-complete {
            text-align: center;
            padding: 30px;
            background-color: #f0f7ff;
            border-radius: 10px;
        }
        
        #exam-complete h3 {
            color: #4a90e2;
            margin-bottom: 20px;
        }
        
        /* Style pour la popup de géolocalisation */
        #geolocation-request {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.8);
            z-index: 9999;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        
        .geolocation-content {
            background-color: #fff;
            padding: 30px;
            border-radius: 10px;
            max-width: 500px;
            text-align: center;
        }
        
        .geolocation-content h2 {
            margin-bottom: 20px;
        }
        
        .geolocation-content p {
            margin-bottom: 25px;
        }
        
        #btn-allow-geoloc {
            background-color: #4a90e2;
            color: white;
            border: none;
            padding: 12px 24px;
            font-size: 16px;
            border-radius: 6px;
            cursor: pointer;
            transition: background-color 0.2s;
        }
        
        #btn-allow-geoloc:hover {
            background-color: #3a7bc8;
        }
    </style>
    
    <script>
    const exam = <%- JSON.stringify(exam) %>;

function calculateFinalScore() {
    let totalPoints = 0;
    let earnedPoints = 0;

    if (!exam || !exam.questions || exam.questions.length === 0) {
        return 0;
    }

    exam.questions.forEach(function(question) {
        const questionId = question._id;
        const inputs = document.querySelectorAll(`input[name="answers[${questionId}]"]`);
        let userAnswer = null;

        if (question.type === 'qcm') {
            inputs.forEach(input => {
                if (input.checked) {
                    userAnswer = input.value.trim();
                }
            });
        } else {
            if (inputs[0]) {
                userAnswer = inputs[0].value.trim();
            }
        }

        if (userAnswer !== null && userAnswer !== '') {
            if (question.type === 'qcm') {
                // Handle both formats: direct string or array of responses
                const correctAnswer = question.bonneReponse || question.reponse;
                
                // Check if correctAnswer is an array or string
                if (Array.isArray(correctAnswer)) {
                    // If it's an array, check if the user's answer is in the array
                    if (correctAnswer.includes(userAnswer)) {
                        earnedPoints += question.points;
                    }
                } else {
                    // If it's a string (older format), do direct comparison
                    if (userAnswer === correctAnswer) {
                        earnedPoints += question.points;
                    }
                }
            } else {
                // Réponse directe avec tolérance (si définie)
                const bonneReponse = (question.reponse || "").trim().toLowerCase();
                const reponseEtudiant = userAnswer.toLowerCase();

                if (question.tolerance && !isNaN(parseFloat(question.tolerance))) {
                    const tolerance = parseFloat(question.tolerance);
                    const reponseNum = parseFloat(reponseEtudiant);
                    const bonneReponseNum = parseFloat(bonneReponse);

                    if (!isNaN(reponseNum) && Math.abs(reponseNum - bonneReponseNum) <= tolerance) {
                        earnedPoints += question.points;
                    }
                } else if (reponseEtudiant === bonneReponse) {
                    earnedPoints += question.points;
                }
            }
        }

        totalPoints += question.points;
    });

    if (totalPoints === 0) return 0;

    const finalScore = Math.round((earnedPoints / totalPoints) * 100);
    document.getElementById("final-score").textContent = `Score final: ${finalScore} / 100`;
    console.log("Score calculation: " + earnedPoints + " / " + totalPoints + " = " + finalScore);
    return finalScore;
}
// Variables pour gérer l'état des questions et le timer
let currentQuestionIndex = 0;
let totalQuestions = 0; // Sera défini via une variable injectée
let questionTimers = {};
let defaultTimePerQuestion = 120; // 2 minutes par défaut par question (en secondes)
let userCoordinates = null; // Variable pour stocker les coordonnées de géolocalisation
let timerInterval;
let formSubmitted = false;

// Débogage: Afficher les valeurs des timers au démarrage
function logTimerValues() {
    console.log("Valeurs des timers:");
    for (let i = 0; i < totalQuestions; i++) {
        const timerEl = document.getElementById(`question-${i}-timer`);
        if (timerEl) {
            console.log(`Question ${i+1}: ${timerEl.value} secondes`);
        } else {
            console.log(`Question ${i+1}: Élément timer non trouvé`);
        }
    }
}

// Fonction pour demander et enregistrer la géolocalisation
function demanderGeolocalisation() {
    return new Promise((resolve, reject) => {
        if (!navigator.geolocation) {
            alert("Votre navigateur ne supporte pas la géolocalisation");
            reject("Géolocalisation non supportée");
            return;
        }
        
        navigator.geolocation.getCurrentPosition(
            (position) => {
                // Succès : on récupère les coordonnées
                userCoordinates = {
                    latitude: position.coords.latitude,
                    longitude: position.coords.longitude,
                    precision: position.coords.accuracy,
                    timestamp: new Date().toISOString()
                };
                
                // Enregistrer les coordonnées dans localStorage
                localStorage.setItem('examen_geolocalisation', JSON.stringify(userCoordinates));
                
                // Mise à jour du champ caché dans le formulaire
                document.getElementById('geoloc-input').value = JSON.stringify(userCoordinates);
                
                resolve(userCoordinates);
            },
            (error) => {
                // Erreur de géolocalisation
                let message;
                switch (error.code) {
                    case error.PERMISSION_DENIED:
                        message = "Vous avez refusé l'accès à la géolocalisation";
                        break;
                    case error.POSITION_UNAVAILABLE:
                        message = "Les informations de localisation sont indisponibles";
                        break;
                    case error.TIMEOUT:
                        message = "La demande de localisation a expiré";
                        break;
                    default:
                        message = "Une erreur inconnue est survenue";
                }
                alert(message);
                reject(message);
            },
            {
                enableHighAccuracy: true, // Demande une précision élevée
                timeout: 10000,          // Délai maximum de 10 secondes
                maximumAge: 0            // Pas de cache
            }
        );
    });
}

// Fonction pour formater le temps (secondes -> MM:SS)
function formatTime(seconds) {
    // Vérifier que la valeur est un nombre valide
    if (isNaN(seconds) || seconds === null || seconds === undefined) {
        return "00:00"; // Valeur par défaut
    }
    
    // Conversion en nombre et s'assurer que c'est positif
    seconds = Math.max(0, Number(seconds));
    
    const minutes = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
}

// Démarrer le timer pour une question
function startQuestionTimer(questionIndex) {
    // Arrêter le timer précédent s'il existe
    if (timerInterval) {
        clearInterval(timerInterval);
    }
    
    // Récupérer le temps limite pour cette question
    let timeRemaining;
    const timerEl = document.getElementById(`question-${questionIndex}-timer`);
    
    if (timerEl && timerEl.value && !isNaN(parseInt(timerEl.value))) {
        timeRemaining = parseInt(timerEl.value);
        console.log(`Temps défini pour la question ${questionIndex+1}: ${timeRemaining} secondes`);
    } else if (questionTimers[questionIndex] && !isNaN(questionTimers[questionIndex])) {
        timeRemaining = questionTimers[questionIndex];
        console.log(`Temps défini pour la question ${questionIndex+1} depuis questionTimers: ${timeRemaining} secondes`);
    } else {
        timeRemaining = defaultTimePerQuestion;
        console.log(`Temps par défaut pour la question ${questionIndex+1}: ${timeRemaining} secondes`);
    }
    
    // Réinitialiser l'affichage du timer global
    const timerElement = document.getElementById('timer');
    if (timerElement) {
        timerElement.textContent = formatTime(timeRemaining);
        timerElement.style.color = '#4a90e2'; // Réinitialiser la couleur
    }
    
    // Mettre à jour le timer spécifique à la question
    const questionTimerDisplay = document.getElementById(`question-${questionIndex}-time-display`);
    if (questionTimerDisplay) {
        questionTimerDisplay.textContent = formatTime(timeRemaining);
    }
    
    // Configurer et démarrer le nouveau timer
    timerInterval = setInterval(() => {
        timeRemaining--;
        
        // Mettre à jour l'affichage du timer global
        if (timerElement) {
            timerElement.textContent = formatTime(timeRemaining);
            // Changer la couleur quand il reste peu de temps
            if (timeRemaining <= 30) {
                timerElement.style.color = '#e74c3c';
            }
        }
        
        // Mettre à jour le timer spécifique à la question
        if (questionTimerDisplay) {
            questionTimerDisplay.textContent = formatTime(timeRemaining);
            if (timeRemaining <= 30) {
                questionTimerDisplay.style.color = '#e74c3c';
            }
        }
        
        // Temps écoulé pour cette question
        if (timeRemaining <= 0) {
            clearInterval(timerInterval);
            moveToNextQuestion(questionIndex);
        }
    }, 1000);
}

// Fonction pour passer à la question suivante
function moveToNextQuestion(currentIndex) {
    // Cacher la question actuelle
    const currentQuestion = document.getElementById(`question-${currentIndex}`);
    if (currentQuestion) {
        currentQuestion.style.display = 'none';
    }
    
    // Si c'était la dernière question, afficher l'écran final
    if (currentIndex >= totalQuestions - 1) {
        const examComplete = document.getElementById('exam-complete');
        if (examComplete) {
            examComplete.style.display = 'block';
        }
        
        // Calculer et afficher le score final
        const score = calculateFinalScore();
        console.log("Score final:", score);
        
        const timerContainer = document.getElementById('timer-container');
        if (timerContainer) {
            timerContainer.style.display = 'none';
        }
        
        if (timerInterval) {
            clearInterval(timerInterval);
        }
        return;
    }
    
    // Passer à la question suivante
    currentQuestionIndex = currentIndex + 1;
    
    const nextQuestion = document.getElementById(`question-${currentQuestionIndex}`);
    if (nextQuestion) {
        nextQuestion.style.display = 'block';
    }
    
    // Démarrer le timer pour la nouvelle question
    startQuestionTimer(currentQuestionIndex);
}

// Créer la fenêtre modale pour la géolocalisation
function createGeolocationModal() {
    // Création de la div pour la demande de géolocalisation
    const geolocDiv = document.createElement('div');
    geolocDiv.id = 'geolocation-request';
    
    const geolocContent = document.createElement('div');
    geolocContent.className = 'geolocation-content';
    
    geolocContent.innerHTML = `
        <h2>Activation de la géolocalisation</h2>
        <p>Pour continuer l'examen, merci d'autoriser l'accès à votre position géographique.</p>
        <p>Cette information est nécessaire pour valider votre participation à l'examen.</p>
        <button id="btn-allow-geoloc">Autoriser la géolocalisation</button>
    `;
    
    geolocDiv.appendChild(geolocContent);
    document.body.appendChild(geolocDiv);
    
    // Masquer toutes les questions au démarrage
    for(let i = 0; i < totalQuestions; i++) {
        const questionEl = document.getElementById(`question-${i}`);
        if(questionEl) questionEl.style.display = 'none';
    }
    
    // Masquer le timer global jusqu'à ce que la géolocalisation soit approuvée
    const timerContainer = document.getElementById('timer-container');
    if(timerContainer) timerContainer.style.display = 'none';
    
    // Ajouter l'événement au bouton d'autorisation de géolocalisation
    document.getElementById('btn-allow-geoloc').addEventListener('click', function() {
        demanderGeolocalisation()
            .then(coords => {
                // Supprimer la div de demande de géolocalisation
                document.getElementById('geolocation-request').remove();
                
                // Afficher la première question et démarrer le timer
                if (totalQuestions > 0) {
                    document.getElementById('question-0').style.display = 'block';
                    if (timerContainer) timerContainer.style.display = 'block';
                    // Log timer values for debugging
                    logTimerValues();
                    startQuestionTimer(0);
                }
            })
            .catch(error => {
                alert('Vous devez autoriser la géolocalisation pour continuer l\'examen.');
            });
    });
}

// Initialiser et configurer à l'initialisation de la page
document.addEventListener('DOMContentLoaded', function() {
    // Récupérer le nombre total de questions
    totalQuestions = parseInt(document.getElementById('total-questions').value) || 0;
    console.log(`Nombre total de questions: ${totalQuestions}`);
    
    // Initialiser les timers pour chaque question
    for (let i = 0; i < totalQuestions; i++) {
        const timerEl = document.getElementById(`question-${i}-timer`);
        if (timerEl) {
            const timerValue = parseInt(timerEl.value);
            if (!isNaN(timerValue)) {
                questionTimers[i] = timerValue;
                console.log(`Timer pour question ${i+1} défini à ${timerValue} secondes`);
            } else {
                questionTimers[i] = defaultTimePerQuestion;
                console.log(`Timer pour question ${i+1} défini par défaut à ${defaultTimePerQuestion} secondes`);
            }
            
            // Mettre à jour l'affichage du timer pour cette question
            const displayEl = document.getElementById(`question-${i}-time-display`);
            if (displayEl) {
                displayEl.textContent = formatTime(questionTimers[i]);
            }
        } else {
            console.warn(`Élément timer non trouvé pour la question ${i+1}`);
            questionTimers[i] = defaultTimePerQuestion;
        }
    }
    
    // Ajouter les écouteurs d'événements pour les boutons "Question suivante"
    const nextButtons = document.querySelectorAll('.btn-next');
    nextButtons.forEach(button => {
        button.addEventListener('click', function() {
            const questionIndex = parseInt(this.getAttribute('data-question-index'));
            
            // Valider si la question a été répondue
            const questionElement = document.getElementById(`question-${questionIndex}`);
            let answered = false;
            
            // Vérifier les réponses QCM
            const radioInputs = questionElement.querySelectorAll('input[type="radio"]');
            radioInputs.forEach(input => {
                if (input.checked) {
                    answered = true;
                }
            });
            
            // Vérifier les réponses texte
            const textInputs = questionElement.querySelectorAll('input[type="text"]');
            textInputs.forEach(input => {
                if (input.value.trim() !== '') {
                    answered = true;
                }
            });
            
            // Si la question est répondue, ou si on force le passage
            if (answered || confirm('Vous n\'avez pas répondu à cette question. Voulez-vous vraiment passer à la suivante?')) {
                moveToNextQuestion(questionIndex);
            }
        });
    });
    
    // Empêcher la double soumission du formulaire
    document.getElementById('exam-form').addEventListener('submit', function(e) {
        if (formSubmitted) {
            e.preventDefault();
            return false;
        }
        
        formSubmitted = true;
        return true;
    });
    
    // Ajouter un gestionnaire d'événement pour le bouton de soumission
    const submitButton = document.querySelector('.btn-submit');
    if (submitButton) {
        submitButton.addEventListener('click', function(e) {
            // Calculer et afficher le score final avant de soumettre
            calculateFinalScore();
        });
    }
    
    // Créer la fenêtre modale pour demander la géolocalisation
    createGeolocationModal();
});

function exitPage() {
    if (confirm('Êtes-vous sûr de vouloir quitter l\'examen? Toutes vos réponses seront perdues.')) {
        window.location.href = "/etudiant";
    }
}
    </script>
</body>
</html>